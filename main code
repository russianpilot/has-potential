/*
* Code ist written for Processing 3.5.3
* 30/05/2019
*/

color black = color(0, 0, 0);
color white = color(255, 255, 255);

int sq_s = 8; // Size of Potential_Square
int d = 2;

int s = 52;

int[][] oa = new int[s][s];
float[][] pa = new float[s*d][s*d];

// data logger for point:
int p_x = 21; // 21
int p_y = 26; // 26
int max_data_point = 999;  // Maximale Anzahl (fehlerfrei) biss 1000
float[] tr = new float[1000000]; // einfach mal geraten, dass vorher das feld fertig gerechnet ist
float[] or = new float[1000000];

float f = 1.5;   // Overrelaxition Faktor
float k = 1; // Potentialdifferenz fürs gesamte Feld
float delta = k;
int counter = 0;

int x_off = 50;
int y_off = 50;

void setup() {
  // x: Main Potential Field: 832 + x_off: 50*2 + Scale: 50
  //   + Evaluation Graph: 1032
  // y: Main Potential Field: 832 + y_off: 50*2  
  size(2114, 1000, P2D); 
  background(white);
  colorMode(HSB, 360, 100, 100); // Hue / Saturation / Brightness
  frameRate(240);

  for (int i = 0; i < s*d; i++) {
    for (int j = 0; j < s*d; j++) {
      pa[i][j] = int(random(100));
    }
  }

  for (int i = 0; i < s; i++) {
    for (int j = 0; j < s; j++) {
      oa[i][j] = -1;
    }
  }

  
  // Anordnung A
   int p_rahmen = 0;
   p_rect(0, 0, 1, 52, p_rahmen);
   p_rect(0, 0, 52, 1, p_rahmen);
   p_rect(0, 51, 52, 1, p_rahmen);
   p_rect(51, 0, 1, 52, p_rahmen);
   
   p_rect(9, 24, 4, 4, 100);
   

  /*
  // Anordnung B
   int p_rahmen = 0;
   p_rect(0, 0, 1, 52, p_rahmen);
   p_rect(0, 0, 52, 1, p_rahmen);
   p_rect(0, 51, 52, 1, p_rahmen);
   p_rect(51, 0, 1, 52, p_rahmen);
   
   p_rect(9, 24, 4, 4, 100);
   p_rect(25, 6, 1, 40, 0);
   */
/*
  // Anordnung C
  int p_rahmen = 20;
  p_rect(0, 0, 1, 52, p_rahmen);
  p_rect(0, 0, 52, 1, p_rahmen);
  p_rect(0, 51, 52, 1, p_rahmen);
  p_rect(51, 0, 1, 52, p_rahmen);

  p_rect(9, 24, 4, 4, 100);
  p_rect(41, 24, 4, 4, 0);
*/

  // Skala
  for (int i = 20; i >= 1; i--) {
    fill(map(float(i*5), 0, 100, 240, 60), 100, 100);
    rect(s*d*sq_s+x_off+25, y_off+(s*d*sq_s)/20*(20-i), 25, (s*d*sq_s)/20);
    textSize(15);
    fill(0, 0, 0);
    text(i*5, s*d*sq_s+x_off+55, y_off+(s*d*sq_s)/20*(20-i)+5);
  }
  text(0, s*d*sq_s+x_off+55, y_off+(s*d*sq_s)/20*(20-0)+5);

  // Black Frame
  stroke(black);
  rect(x_off-1, y_off-1, 832+1, 832+1);

  // koordinatenachse fürs feld
  for (int i = 26; i > -27; i--) {
    int l;
    if ( i % 5 == 0) {
      fill(255, 0, 0);
      l = 5;
    } else {
      fill(255, 0, 255);
      l = 0;
    }
    stroke(255, 0, 0);
    line(x_off, y_off+sq_s*d*(26-i), x_off-10-l, y_off+sq_s*d*(26-i));
    text(-i, x_off-45, y_off+sq_s*d*(26-i)+5);
  }
  for (int i = -11; i < 42; i++) {
    int l;
    if ( i % 5 == 0) {
      fill(255, 0, 0);
      l = 5;
    } else {
      fill(255, 0, 255);
      l = 0;
    }
    stroke(255, 0, 0);
    line(x_off+sq_s*d*(i+11), y_off+832, x_off+sq_s*d*(i+11), y_off+832+10+l);
    text(i, x_off+sq_s*d*(i+11)-10, y_off+832+30);
  }

  // Skala Graphen
  for (int i = 100; i > 0; i--) {
    int l;
    if ( i % 5 == 0) {
      fill(255, 0, 0);
      l = 5;

      stroke(255, 0, 0);

      line(x_off+832+175, y_off+8.3*i+2, x_off+832+175-5-l, y_off+8.3*i+2);
      text(100-i, x_off+832+175-30, y_off+8.3*i+5);

      fill(205, 100, 100);
      //text(100-i, x_off+832+175-65, y_off+8.3*i+5);
    } else {
      l = 0;

      stroke(255, 0, 0);

      line(x_off+832+175, y_off+8.3*i+2, x_off+832+175-5-l, y_off+8.3*i+2);
    }
    if (i % 10 == 0) {
      fill(280, 100, 100);
      text(log10(100-i), x_off+832+175+1032-35, y_off+8.3*i+5);
    }
  }
  //text("Durchschnitts Potential", x_off+832+175+350, y_off);

  fill(280, 100, 100);
  text("Overrelaxation am Punkt", x_off+832+175+1032-170, y_off);
  fill(black);
  text("Potential [V] am Punkt für k<1000", x_off+832+175+20, y_off);
}

void draw() {

  if ( k <= abs(delta)) {
    //println((k<=abs(delta))?"true":"false");
    for (int i = 0; i < s*d-1; i++) {
      for (int j = 0; j < s*d-1; j++) {
        if (oa[int(i/2)][int(j/2)] <= -1) {
          delta += pa[i][j]*1000;
          pa[i][j] = (pa[i-1][j]+pa[i+1][j]+pa[i][j-1]+pa[i][j+1])/4;
          delta -= pa[i][j]*1000;

          // data logger
        }
      }
    }
    tr[counter] = pa[p_x][p_y];
    counter++;
    if (counter > 0) {
      or[counter] = (tr[counter] - tr[counter-1])*f+tr[counter-1];
    } else {
    }
    delta /= s*d*s*d;

    // Drawing Results

    // Side Chart Data point
    stroke(white);
    fill(white);
    rect(x_off+832+175, y_off, 1000, 832);
 

    // Evaluation Graph
    stroke(black);
    fill(255, 100, 0);
    triangle(170+x_off+832, y_off+10, 180+x_off+832, y_off+10, 175+x_off+832, y_off);
    line(175+x_off+832, y_off, 175+x_off+832, y_off+832);

    triangle(170+x_off+832+1000-10, y_off+832-5, 170+x_off+832+1000-10, y_off+832+5, 170+x_off+1000+832, y_off+832);
    line(170+x_off+832, y_off+832, 170+x_off+832+1000, y_off+832);


    // potential an dem Data-Point
    if (counter <= max_data_point) {  // Eigentlich sind die ersten 500 interessant
      int scale = 1000/ counter;
      for (int i = 1; i < counter; i++) {
        line(x_off+832+176+(scale*(i-1)), map(tr[i-1], 0.00, 100.00, y_off+832, y_off), 
          x_off+832+176+(scale*i), map(tr[i], 0.00, 100.00, y_off+832, y_off));
      }
    } else {
      int scale = 1000/ max_data_point;
      for (int i = 1; i < max_data_point; i++) {
        line(x_off+832+176+(scale*(i-1)), map(tr[i-1], 0.00, 100.00, y_off+832, y_off), 
          x_off+832+176+(scale*i), map(tr[i], 0.00, 100.00, y_off+832, y_off));
      }
    }

    // Graph Overrelaxation

    stroke(280, 100, 100);
    if (counter <= max_data_point) {  // Eigentlich sind die ersten 500 interessant
      int scale = 1000/ counter;
      for (int i = 1; i < counter; i++) {
        line(x_off+832+176+(scale*(i-1)), y_off+832-log10(abs(or[i-1]))*832/4, 
          x_off+832+176+(scale*i), y_off+832-log10(abs(or[i]))*832/4);
        println(or[i] + "|" +log10(abs(or[i])));
      }
    } else {
      int scale = 1000/ max_data_point;
      for (int i = 1; i < max_data_point; i++) {
        line(x_off+832+176+(scale*(i-1)), y_off+832-log10(abs(or[i-1]))*832/4, 
          x_off+832+176+(scale*i), y_off+832-log10(abs(or[i]))*832/4);
      }
    }

    // potential Field
    noStroke();
    for (int i = 0; i < s*d; i++) {
      for (int j = 0; j < s*d; j++) {
        fill(map(pa[i][j], 0, 100, 240, 60), 100, 100);
        rect(i*sq_s+x_off, j*sq_s+y_off, sq_s, sq_s);
      }
    }
    // Potential Field grid
    noFill();
    stroke(255, 0, 0);
    for (int i = 0; i < s; i++) {
      for (int j = 0; j < s; j++) {
        rect(i*(d*sq_s)+x_off, j*(d*sq_s)+y_off, sq_s*d, sq_s*d);
      }
    }
    // Data Square
    rect(x_off+(p_x*sq_s*d)+1, y_off+(p_y*sq_s*d)+1, d*sq_s, d*sq_s);
    // info Chart Top
    stroke(0, 100, 0);
    fill(white);
    // Clearance Rect
    rect(0, 0, 500, 45);
    fill(0, 100, 0);
    // Information
    text("FPS: ", 5, 20); 
    text(frameRate, 35, 20); // Framerate
    text("Diff: ", 120, 20); 
    text(abs(delta), 160, 20);  // difference of field
    text("Counter: ", 250, 20); 
    text(counter, 320, 20);  // Field Refreshed
    text("Potential ("+ (p_x-11) + "|" + (p_y-26) + "): "+ (pa[p_x][p_y]+pa[p_x+1][p_y]+pa[p_x][p_y+1]+pa[p_x+1][p_y+1])/4, 5, 40); // Potential of Data Point
  } else {
    noLoop();
    save("field.png");
  }
}

void p_rect(int x, int y, int xs, int ys, int p) {
  for (int i = x; i < x+xs; i++) {
    for (int j = y; j < y+ys; j++) {
      oa[i][j] = p;
    }
  }

  for (int i = 0; i < s*d; i++) {
    for (int j = 0; j < s*d; j++) {
      if (oa[int(i/2)][int(j/2)] > -1) {
        pa[i][j] = oa[int(i/2)][int(j/2)];
      }
    }
  }
}

// Calculates the base-10 logarithm of a number
float log10 (float x) {
  //println("log");
  return (log(x) / log(10));
}
