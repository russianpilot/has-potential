int sq_s = 8; // Size of Potential_Square
int d = 2;

int s = 52;



int[][] oa = new int[s][s];
float[][] pa = new float[s*d][s*d];
float[] tr = new float[5];

float delta = 1;
float k = 0.1; // Iteration Steps

int x_off = 50;
int y_off = 50;

void setup() {
  // x: Main Potential Field: 832 + x_off: 50*2 + Scale: 50
  //   + Evaluation Graph: 832
  // y: Main Potential Field: 832 + y_off: 50*2  
  size(1814, 1132); 
  background(255);
  colorMode(HSB, 360, 100, 100); // Hue / Saturation / Brightness
  frameRate(240);

  for (int i = 0; i < s*d; i++) {
    for (int j = 0; j < s*d; j++) {
      pa[i][j] = int(random(100));
    }
  }

  for (int i = 0; i < s; i++) {
    for (int j = 0; j < s; j++) {
      oa[i][j] = -1;
    }
  }
  int p_rahmen = 20;
  p_rect(0, 0, 1, 52, p_rahmen);
  p_rect(0, 0, 52, 1, p_rahmen);
  p_rect(0, 51, 52, 1, p_rahmen);
  p_rect(51, 0, 1, 52, p_rahmen);

  p_rect(9, 24, 4, 4, 100);

  //p_rect(25, 6, 1, 40, 0);
  p_rect(41, 24, 4, 4, 0);

  //p_rect(40, 4, 4, 6, 80);
  //p_rect(30, 30, 3, 8, 100);
  //p_rect(36, 30, 3, 8, 20);

  // Skala
  for (int i = 20; i >= 1; i--) {
    fill(map(float(i*5), 0, 100, 240, 60), 100, 100);
    rect(s*d*sq_s+x_off+25, y_off+(s*d*sq_s)/20*(20-i), 25, (s*d*sq_s)/20);
    textSize(15);
    fill(0, 0, 0);
    text(i*5, s*d*sq_s+x_off+55, y_off+(s*d*sq_s)/20*(20-i)+5);
  }
  text(0, s*d*sq_s+x_off+55, y_off+(s*d*sq_s)/20*(20-0)+5);

  // Black Frame
  stroke(255, 0, 0);
  rect(x_off-1, y_off-1, 832+1, 832+1);

  // koordinatenachse fÃ¼rs feld
  for (int i = 26; i > -27; i--) {
    int l;
    if ( i % 5 == 0) {
      fill(255, 0, 0);
      l = 5;
    } else {
      fill(255, 0, 255);
      l = 0;
    }
    stroke(255, 0, 0);
    line(x_off, y_off+sq_s*d*(26-i), x_off-10-l, y_off+sq_s*d*(26-i));
    text(i, x_off-45, y_off+sq_s*d*(26-i)+5);
  }
  for(int i = -11; i < 42; i++){
    int l;
    if ( i % 5 == 0) {
      fill(255, 0, 0);
      l = 5;
    } else {
      fill(255, 0, 255);
      l = 0;
    }
    stroke(255, 0, 0);
    line(x_off+sq_s*d*(i+11),y_off+832,x_off+sq_s*d*(i+11), y_off+832+10+l);
    text(i, x_off+sq_s*d*(i+11)-10, y_off+832+30);
  }


  // Evaluation Graph
  fill(255, 100, 0);
  triangle(50, 910, 60, 910, 55, 900);
  line(55, 910, 55, 1078);
  triangle(872, 1068, 872, 1077, 882, 1072);
  line(50, 1072, 882, 1072);
}

void draw() {

  if ( k <= abs(delta)) {
    println((k<=abs(delta))?"true":"false");
    for (int i = 0; i < s*d-1; i++) {
      for (int j = 0; j < s*d-1; j++) {
        if (oa[int(i/2)][int(j/2)] <= -1) {
          delta += pa[i][j]*100;
          pa[i][j] = (pa[i-1][j]+pa[i+1][j]+pa[i][j-1]+pa[i][j+1])/4;
          delta -= pa[i][j]*100;
        }
      }
    }
    delta /= s*d*s*d;

    // Drawing Results
    noStroke();
    for (int i = 0; i < s*d; i++) {
      for (int j = 0; j < s*d; j++) {
        fill(pa[i][j], 100, 100);
        rect(i*sq_s+x_off, j*sq_s+y_off, sq_s, sq_s);
      }
    }
    stroke(0, 100, 0);
    fill(0, 0, 100);
    rect(730, 930, 100, 50);
    rect(0,0,80,20);
    fill(0, 100, 0);
    text(abs(delta), 750, 950);
    
    text(frameRate, 0, 15);
  }

  noFill();
  stroke(255, 0, 0);
  for (int i = 0; i < s; i++) {
    for (int j = 0; j < s; j++) {
      rect(i*(d*sq_s)+x_off, j*(d*sq_s)+y_off, sq_s*d, sq_s*d);
      //pa[i][j] = int(random(100));
    }
  }
}

void p_rect(int x, int y, int xs, int ys, int p) {
  for (int i = x; i < x+xs; i++) {
    for (int j = y; j < y+ys; j++) {
      oa[i][j] = p;
    }
  }

  for (int i = 0; i < s*d; i++) {
    for (int j = 0; j < s*d; j++) {
      if (oa[int(i/2)][int(j/2)] > -1) {
        pa[i][j] = map(oa[int(i/2)][int(j/2)], 0, 100, 240, 60);
      }
    }
  }
  /*
  stroke(0, 0, 100);
   noFill();
   rect(x*d+1,y*d+1,(x+xs)*d-1,(y+ys)*d-1);
   */
}
